/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RedirectObservation struct {
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Modified *string `json:"modified,omitempty" tf:"modified,omitempty"`

	RedirectID *int64 `json:"redirectId,omitempty" tf:"redirect_id,omitempty"`
}

type RedirectParameters struct {

	// Target where redirect should point to.
	// +kubebuilder:validation:Required
	Destination *string `json:"destination" tf:"destination,omitempty"`

	// Define wether this redirect is enabled or not.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Type to match the redirect.
	// +kubebuilder:validation:Required
	MatchingType *string `json:"matchingType" tf:"matching_type,omitempty"`

	// The ascending order for the redirect rules.
	// +kubebuilder:validation:Optional
	Sort *int64 `json:"sort,omitempty" tf:"sort,omitempty"`

	// Location to match against.
	// +kubebuilder:validation:Required
	Source *string `json:"source" tf:"source,omitempty"`

	// The Subdomain for the redirect.
	// +kubebuilder:validation:Required
	SubdomainName *string `json:"subdomainName" tf:"subdomain_name,omitempty"`

	// Type of redirection.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// RedirectSpec defines the desired state of Redirect
type RedirectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RedirectParameters `json:"forProvider"`
}

// RedirectStatus defines the observed state of Redirect.
type RedirectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RedirectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Redirect is the Schema for the Redirects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,myrasecjet}
type Redirect struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedirectSpec   `json:"spec"`
	Status            RedirectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedirectList contains a list of Redirects
type RedirectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Redirect `json:"items"`
}

// Repository type metadata.
var (
	Redirect_Kind             = "Redirect"
	Redirect_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Redirect_Kind}.String()
	Redirect_KindAPIVersion   = Redirect_Kind + "." + CRDGroupVersion.String()
	Redirect_GroupVersionKind = CRDGroupVersion.WithKind(Redirect_Kind)
)

func init() {
	SchemeBuilder.Register(&Redirect{}, &RedirectList{})
}
